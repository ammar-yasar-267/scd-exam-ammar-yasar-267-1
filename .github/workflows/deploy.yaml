name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        service: [auth, blogs, comments, profile]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: SCD_Q1_*/${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      run: |
        cd SCD_Q1_$(echo ${{ matrix.service }} | sed 's/.*/\u&/')
        npm ci

    - name: Run tests
      run: |
        cd SCD_Q1_$(echo ${{ matrix.service }} | sed 's/.*/\u&/')
        npm test || echo "No tests found for ${{ matrix.service }}"
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-key
        PORT: 3000

    - name: Build Docker image
      run: |
        cd SCD_Q1_$(echo ${{ matrix.service }} | sed 's/.*/\u&/')
        docker build -t scd-${{ matrix.service }}:${{ github.sha }} .

  integration-tests:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create environment files
      run: |
        for service in Auth Blogs Comments Profile; do
          echo "NODE_ENV=test" > SCD_Q1_${service}/.env
          echo "MONGO_URI=mongodb://admin:password@mongodb:27017/test_db?authSource=admin" >> SCD_Q1_${service}/.env
          echo "JWT_SECRET=test-jwt-secret-key" >> SCD_Q1_${service}/.env
          echo "PORT=3000" >> SCD_Q1_${service}/.env
        done

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to be ready

    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:3001/api/auth > /dev/null 2>&1; then
            echo "Auth service is ready"
            break
          fi
          sleep 2
        done

    - name: Test Auth Service - Register and Login
      run: |
        # Register a test user
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:3001/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","email":"test@example.com","password":"testpass123"}')
        echo "Register Response: $REGISTER_RESPONSE"
        
        # Login to get JWT token
        LOGIN_RESPONSE=$(curl -s -X POST http://localhost:3001/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"testpass123"}')
        echo "Login Response: $LOGIN_RESPONSE"
        
        # Extract token
        TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)
        echo "JWT_TOKEN=$TOKEN" >> $GITHUB_ENV
        
        if [ -z "$TOKEN" ]; then
          echo "❌ Failed to obtain JWT token"
          exit 1
        else
          echo "✅ Successfully obtained JWT token"
        fi

    - name: Test Blog Service - Create Blog
      run: |
        # Create a blog post
        BLOG_RESPONSE=$(curl -s -X POST http://localhost:3002/api/blogs \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $JWT_TOKEN" \
          -d '{"title":"Test Blog Post","content":"This is a test blog content"}')
        echo "Blog Creation Response: $BLOG_RESPONSE"
        
        if echo "$BLOG_RESPONSE" | grep -q "successfully"; then
          echo "✅ Blog created successfully"
        else
          echo "❌ Failed to create blog"
          exit 1
        fi
        
        # Get all blogs to verify creation
        GET_BLOGS=$(curl -s http://localhost:3002/api/blogs)
        echo "Get Blogs Response: $GET_BLOGS"

    - name: Test Comment Service - Add Comment
      run: |
        # First get a blog ID
        BLOGS=$(curl -s http://localhost:3002/api/blogs)
        BLOG_ID=$(echo $BLOGS | grep -o '"_id":"[^"]*' | head -1 | cut -d'"' -f4)
        echo "Using Blog ID: $BLOG_ID"
        
        # Add comment with token (should succeed)
        COMMENT_RESPONSE=$(curl -s -X POST http://localhost:3003/api/comments \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $JWT_TOKEN" \
          -d "{\"blogId\":\"$BLOG_ID\",\"content\":\"This is a test comment\"}")
        echo "Comment Creation Response: $COMMENT_RESPONSE"
        
        if echo "$COMMENT_RESPONSE" | grep -q "successfully"; then
          echo "✅ Comment added successfully with token"
        else
          echo "❌ Failed to add comment with token"
          exit 1
        fi
        
        # Try to add comment without token (should fail)
        UNAUTHORIZED_RESPONSE=$(curl -s -X POST http://localhost:3003/api/comments \
          -H "Content-Type: application/json" \
          -d "{\"blogId\":\"$BLOG_ID\",\"content\":\"This should fail\"}")
        echo "Unauthorized Comment Response: $UNAUTHORIZED_RESPONSE"
        
        if echo "$UNAUTHORIZED_RESPONSE" | grep -q "Access denied"; then
          echo "✅ Comment correctly rejected without token"
        else
          echo "❌ Comment should have been rejected without token"
          exit 1
        fi

    - name: Test Profile Service - Get Profile
      run: |
        # Get profile data
        PROFILE_RESPONSE=$(curl -s -X GET http://localhost:3004/api/profile \
          -H "Authorization: Bearer $JWT_TOKEN")
        echo "Profile Response: $PROFILE_RESPONSE"
        
        if echo "$PROFILE_RESPONSE" | grep -q "bio\|avatar" || echo "$PROFILE_RESPONSE" | grep -q "{}"; then
          echo "✅ Profile data retrieved successfully"
        else
          echo "❌ Failed to retrieve profile data"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        for service in Auth Blogs Comments Profile; do
          cd SCD_Q1_${service}
          npm audit --audit-level moderate
          cd ..
        done